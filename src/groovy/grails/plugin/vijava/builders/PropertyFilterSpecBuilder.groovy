/*
 * Copyright 2014 Aaron Brown
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package grails.plugin.vijava.builders

import com.vmware.vim25.mo.ManagedObject

import com.vmware.vim25.ObjectSpec
import com.vmware.vim25.PropertySpec
import com.vmware.vim25.SelectionSpec
import com.vmware.vim25.PropertyFilterSpec
import com.vmware.vim25.ManagedObjectReference

/**
 * Builder for creating PropertyFilterSpec collections.
 *
 * @author Aaron Brown
 */
class PropertyFilterSpecBuilder {

    /**
     * The PropertyFilterSpec collection.
     */
    List<PropertyFilterSpec> propertyFilterSpecs

    /**
     * Constructs the <b>PropertyFilterSpecBuilder</b>.
     */
    public PropertyFilterSpecBuilder() {
        propertyFilterSpecs = [] as PropertyFilterSpec[]
    }

    /**
     * Constructs the <b>PropertyFilterSpecBuilder</b> and directly runs a
     * <code>Closure</code>.
     */
    public PropertyFilterSpecBuilder(Closure closure) {
        this()

        Closure runClosure = closure.clone()
        runClosure.delegate = this
        runClosure.resolveStrategy = Closure.DELEGATE_FIRST
        runClosure()
    }

    /**
     * Add a PropertyFilterSpec.
     *
     * <p>
     * The key of each map corresponds to the <b>type</b> parameter, and the
     * value is a List of the <b>properties</b>.
     * </p>
     *
     * @param   specDeclaration
     *
     * The declaration of PropertySpec in <code>Map</code>-form
     * (see method description for more details).
     *
     * @param   root
     *
     * A ManagedObjectReference to the root Object from which to search.
     *
     * @param   selectionSpecs
     *
     * A SelectionSpec, usually generated by <b>PropertyCollectorUtils</b> provided
     * by the VI JAVA Library.
     *
     * @return
     *
     * The created PropertyFilterSpec, which is also added to the internal collection.
     */
    public PropertyFilterSpec addPropertyFilterSpec(Map<String, List<String>> specDeclaration, ManagedObjectReference root, SelectionSpec[] selectionSpecs) {
        PropertySpec[] propertySpecs = new PropertySpecBuilder({
            addSpecs(specDeclaration)
        }).propertySpecs

        return addPropertyFilterSpec(root, selectionSpecs, propertySpecs)
    }

    /**
     * Add a PropertyFilterSpec.
     *
     * @param   root
     *
     * A ManagedObjectReference to the root Object from which to search.
     *
     * @param   selectionSpecs
     *
     * A SelectionSpec, usually generated by <b>PropertyCollectorUtils</b> provided
     * by the VI JAVA Library.
     *
     * @param   propertySpecBuildClosure
     *
     * The Closure for the <b>PropertySpecBuilder</b> to execute, which should contain
     * the instructions for building the PropertySpecs.
     *
     * @return
     *
     * The created PropertyFilterSpec, which is also added to the internal collection.
     */
    public PropertyFilterSpec addPropertyFilterSpec(ManagedObjectReference root, SelectionSpec[] selectionSpecs, Closure propertySpecBuilder) {
        PropertySpec[] propertySpecs = new PropertySpecBuilder(propertySpecBuilder).propertySpecs

        return addPropertyFilterSpec(root, selectionSpecs, propertySpecs)
    }

    /**
     * Add a PropertyFilterSpec.
     *
     * @param   root
     *
     * A ManagedObjectReference to the root Object from which to search.
     *
     * @param   selectionSpecs
     *
     * A SelectionSpec, usually generated by <b>PropertyCollectorUtils</b> provided
     * by the VI JAVA Library.
     *
     * @param   propertySpecs
     *
     * The PropertySpec collection created outside of the Builder.
     *
     * @return
     *
     * The created PropertyFilterSpec, which is also added to the internal collection.
     */
    public PropertyFilterSpec addPropertyFilterSpec(ManagedObjectReference root, SelectionSpec[] selectionSpecs, PropertySpec[] propertySpecs) {
        ObjectSpec objectSpec = new ObjectSpec()
        objectSpec.with {
            obj = root
            selectSet = selectionSpecs
        }

        PropertyFilterSpec propertyFilterSpec = new PropertyFilterSpec()
        propertyFilterSpec.with {
            objectSet = objectSpec
            propSet = propertySpecs
        }

        propertyFilterSpecs << propertyFilterSpec

        return propertyFilterSpec
    }
}
